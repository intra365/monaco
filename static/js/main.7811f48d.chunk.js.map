{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","code","editor","monaco","console","log","focus","newValue","e","this","width","height","language","theme","value","options","selectOnLineNumbers","onChange","editorDidMount","React","Component","render","document","getElementById","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"uPAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,wBAHS,E,kDAMnB,SAAeC,EAAQC,GACrBC,QAAQC,IAAI,iBAAkBH,GAC9BA,EAAOI,U,sBAET,SAASC,EAAUC,GACjBJ,QAAQC,IAAI,WAAYE,EAAUC,K,oBAEpC,WACE,IAAMP,EAAOQ,KAAKT,MAAMC,KAIxB,OACE,cAAC,IAAD,CACES,MAAM,MACNC,OAAO,MACPC,SAAS,aACTC,MAAM,UACNC,MAAOb,EACPc,QAVY,CACdC,qBAAqB,GAUnBC,SAAUR,KAAKQ,SACfC,eAAgBT,KAAKS,qB,GA5BIC,IAAMC,WAkCvCC,iBACE,cAAC,EAAD,IACAC,SAASC,eAAe,SCxC1B,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASC,eAAe,SAM1BC,M","file":"static/js/main.7811f48d.chunk.js","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport MonacoEditor from 'react-monaco-editor';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      code: '// type your code...',\n    }\n  }\n  editorDidMount(editor, monaco) {\n    console.log('editorDidMount', editor);\n    editor.focus();\n  }\n  onChange(newValue, e) {\n    console.log('onChange', newValue, e);\n  }\n  render() {\n    const code = this.state.code;\n    const options = {\n      selectOnLineNumbers: true\n    };\n    return (\n      <MonacoEditor\n        width=\"800\"\n        height=\"600\"\n        language=\"javascript\"\n        theme=\"vs-dark\"\n        value={code}\n        options={options}\n        onChange={this.onChange}\n        editorDidMount={this.editorDidMount}\n      />\n    );\n  }\n}\n\nrender(\n  <App />,\n  document.getElementById('root')\n);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}